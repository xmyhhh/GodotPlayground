[gd_scene load_steps=4 format=2]

[sub_resource type="Shader" id=6]
code = "shader_type spatial;
render_mode blend_add,unshaded;
float stepping(float t){
    if(t<0.)return -1.+pow(1.+t,2.);
    else return 1.-pow(1.-t,2.);
}

void vertex(){
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);

MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0),vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0),vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0),vec4(0.0, 0.0, 0.0, 1.0));
}

void fragment()
{
//	vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;
	vec2 uv = (UV - vec2(0.5,0.5))* 4.0;
    vec4 color = vec4(.0,.0,.0, 0);
    uv = normalize(uv) * length(uv);
    for(int i=0;i<12;i++){
        float t = TIME + float(i)*3.141592/12.*(5.+1.*stepping(sin(TIME*3.)));
        vec2 p = vec2(cos(t),sin(t));
        p *= cos(TIME + float(i)*3.141592*cos(TIME/8.));
        vec3 col = cos(vec3(0,1,-1)*3.141592*2./3.+3.141925*(TIME/2.+float(i)/5.)) * 0.5 + 0.5;
        color += vec4(0.05/length(uv-p*0.9)*col,1.0);
    }
    color.xyz = pow(color.xyz,vec3(3.));
    color.w = 1.0;
	ALBEDO = color.rgb;
	ALPHA = color.a;
}"

[sub_resource type="ShaderMaterial" id=7]
resource_local_to_scene = true
render_priority = 1
shader = SubResource( 6 )

[sub_resource type="QuadMesh" id=5]
size = Vector2( 4, 4 )

[node name="Spatial" type="Spatial"]

[node name="Hole" type="MeshInstance" parent="."]
material_override = SubResource( 7 )
cast_shadow = 0
mesh = SubResource( 5 )
