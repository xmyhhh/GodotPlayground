[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;
uniform vec4 outerColor = vec4(1,1,1,1);
uniform vec4 innerColor = vec4(0,0,0,1);
uniform float borderWidthTmin = 0.4;
uniform float borderWidthTmax = 0.5;

uniform bool useAlpha = false;


uniform vec4 c1 = vec4(1,1,1,1);
uniform vec4 c2 = vec4(0.7,0.7,0.7,1);
uniform float gridSize = 12.;
uniform float width = 1;
uniform float height = 1;
	


void fragment(){
	COLOR = vec4(0,0,0,0);
	vec2 uv = UV - vec2(0.5 , 0.5);
	float uv_len = length(uv);
	if(uv_len > borderWidthTmin && uv_len < borderWidthTmax){
		COLOR = outerColor;
	}
	else if(uv_len < borderWidthTmin){
		COLOR = innerColor;
		
		if( !useAlpha ){
			COLOR.a = 1.;
		}
		else{
		
			vec2 pixel = UV * vec2(width, height);
			bool isXOdd = (int(pixel.x / gridSize) % 2 == 1);
			bool isYOdd = (int(pixel.y / gridSize) % 2 == 1);
			if((isXOdd && !isYOdd) || (!isXOdd && isYOdd)){
				COLOR = mix(c1, COLOR, COLOR.a);
			}
			else{
				COLOR = mix(c2, COLOR, COLOR.a);
			}

		}
		
		
	}
	
}"
