[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=5]
code = "shader_type spatial;
render_mode cull_disabled, unshaded;

const float outerBorder = 0.02;
const float innerBorder = 0.03;

const vec4 c1 = vec4(255, 255, 255, 0.9);
const vec4 c2 = vec4(61, 92, 92, 0.5);

const float outerGridNum = 1000.;
const float innerGridNum = 10.;

float SinNormalize(float value, float maxValue, float minValue){
	return 1.57075 * value / (maxValue - minValue);
}

void fragment(){
	vec2 inOuterGridUV = fract(UV * outerGridNum);
	vec2 inInnerGridUV = fract(inOuterGridUV * innerGridNum);
	
	vec4 color = vec4(0, 0, 0, 0);
	
	if(inOuterGridUV.x < outerBorder || inOuterGridUV.y < outerBorder || inOuterGridUV.x > (1. - outerBorder) || inOuterGridUV.y > (1. - outerBorder)){
		color = c1;
	}
	
	else if(inInnerGridUV.x < innerBorder || inInnerGridUV.y < innerBorder || inInnerGridUV.x > (1. - innerBorder) || inInnerGridUV.y > (1. - innerBorder)){
		color = mix(color, c1, c1.a);
	}
	else{
		color =c2;
	}
	
	ALBEDO = color.rgb / 255.;
	ALPHA  = color.a ;
	
}
"

[resource]
shader = SubResource( 5 )
